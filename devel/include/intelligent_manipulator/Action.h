// Generated by gencpp from file intelligent_manipulator/Action.msg
// DO NOT EDIT!


#ifndef INTELLIGENT_MANIPULATOR_MESSAGE_ACTION_H
#define INTELLIGENT_MANIPULATOR_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace intelligent_manipulator
{
template <class ContainerAllocator>
struct Action_
{
  typedef Action_<ContainerAllocator> Type;

  Action_()
    : action()  {
    }
  Action_(const ContainerAllocator& _alloc)
    : action(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::intelligent_manipulator::Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intelligent_manipulator::Action_<ContainerAllocator> const> ConstPtr;

}; // struct Action_

typedef ::intelligent_manipulator::Action_<std::allocator<void> > Action;

typedef boost::shared_ptr< ::intelligent_manipulator::Action > ActionPtr;
typedef boost::shared_ptr< ::intelligent_manipulator::Action const> ActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intelligent_manipulator::Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intelligent_manipulator::Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::intelligent_manipulator::Action_<ContainerAllocator1> & lhs, const ::intelligent_manipulator::Action_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::intelligent_manipulator::Action_<ContainerAllocator1> & lhs, const ::intelligent_manipulator::Action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace intelligent_manipulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::intelligent_manipulator::Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intelligent_manipulator::Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intelligent_manipulator::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intelligent_manipulator::Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intelligent_manipulator::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intelligent_manipulator::Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intelligent_manipulator::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79f44d272f2ebe04451185b0dea57684";
  }

  static const char* value(const ::intelligent_manipulator::Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79f44d272f2ebe04ULL;
  static const uint64_t static_value2 = 0x451185b0dea57684ULL;
};

template<class ContainerAllocator>
struct DataType< ::intelligent_manipulator::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intelligent_manipulator/Action";
  }

  static const char* value(const ::intelligent_manipulator::Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intelligent_manipulator::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] action\n"
;
  }

  static const char* value(const ::intelligent_manipulator::Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intelligent_manipulator::Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intelligent_manipulator::Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intelligent_manipulator::Action_<ContainerAllocator>& v)
  {
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.action[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTELLIGENT_MANIPULATOR_MESSAGE_ACTION_H
